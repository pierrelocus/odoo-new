#!/bin/bash

# $1 = py/xml
# $2 = for py: model / wizard / manifest
# $2 = for xml: view / cron / param
# $3 = model name it extends, eg : sale.order

MODEL=$3
MODEL_NAME=$(sed 's/\./_/g' <<< $MODEL)

CLASS=""
subnames=$(echo $MODEL | tr "." "\n")
for sub in $subnames
do
    CLASS="$CLASS""${sub^}"
done

FILE=""
if [[ $1 == "xml" ]]
then
  if [[ "$2" == "view" ]]
  then
    FILENAME="$MODEL_NAME""_views.xml"
    mkdir -p views
    touch views/$FILENAME
    FILE="views/$FILENAME"
  elif [[ $2 == "cron" ]]
  then
    FILENAME="ir_cron.xml"
    mkdir -p data
    touch "data/$FILENAME"
    FILE="data/$FILENAME"
  elif [[ $2 == "param" ]]
  then
    FILENAME="ir_config_parameter.xml"
    mkdir -p data
    touch "data/$FILENAME"
    FILE="data/$FILENAME"
  fi
elif [[ $1 == "py" ]]
then
  if [[ $2 == "model" ]]
  then
    FILENAME="$MODEL_NAME"".py"
    mkdir -p models
    touch models/$FILENAME
    FILE="models/$FILENAME"
  elif [[ $2 == "manifest" ]]
  then
    FILENAME="__manifest__.py"
    touch $FILENAME
    FILE="$FILENAME"
  elif [[ $2 == "wizard" ]]
  then
    FILENAME="$MODEL_NAME"".py"
    mkdir -p wizards
    touch wizards/$FILENAME
    FILE="wizards/$FILENAME"
  fi
fi

write()
{
  cat <<-EOF >> $FILE
$1
EOF
}

render_view()
{ 
  write "    <record id=\"""$MODEL_NAME""_view_\" model=\"ir.ui.view\">"
  write "        <field name=\"model\">""$MODEL""</field>"
  write "        <field name=\"inherit_id\" ref=\"\"/>"
  write "        <field name=\"arch\" type=\"xml\">"
  write "            <xpath expr=\"//\" position=\"after\">"
  write "            </xpath>"
  write "        </field>"
  write "    </record>"
}

render_cron()
{
  write "    <record id=\"cron_\" model=\"ir.cron\">"
  write "        <field name=\"name\"></field>"
  write "        <field name=\"active\" eval=\"True\"/>"
  write "        <field name=\"user_id\" ref=\"base.user_root\"/>"
  write "        <field name=\"interval_number\">1</field>"
  write "        <field name=\"interval_type\">days</field>"
  write "        <field name=\"numbercall\">-1</field>"
  write "        <field name=\"model_id\" ref=\"module.model_""$MODEL_NAME""\"/>"
  write "        <field name=\"code\">model.cron_()</field>"
  write "        <field name=\"state\">code</field>"
  write "        <field name=\"type\">ir.actions.server</field>"
  write "    </record>"
}

render_system_parameter()
{
  write "    <record id=\"my_sys_param\" model=\"ir.config_parameter\">"
  write "        <field name=\"key\">my_sys_param</field>"
  write "        <field name=\"value\">Omelette</field>"
  write "    </record>"
}

create_xml()
{
  write "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
  write "<odoo>"
  if [[ $2 == 'view' ]]
  then
    render_view
  elif [[ $2 == 'cron' ]]
  then
    render_cron
  elif [[ $2 == 'param' ]]
  then
    render_system_parameter
  fi
  write "</odoo>"
}

render_model()
{

  write "from odoo import api, fields, models"
  write ""
  write ""
  write "class $CLASS""(models.Model):"
  write "    _inherit = '""$MODEL""'"
  write ""
  write "    x = fields.Char()"
}

render_wizard()
{
  write "from odoo import api, fields, models"
  write ""
  write ""
  write "class $CLASS""(models.TransientModel):"
  write "    _inherit = '""$MODEL""'"
  write ""
  write "    x = fields.Char()"
}

render_manifest()
{
  write "{"
  write "    'name': \"your_module\","
  write ""
  write "    'summary': \"\"\""
  write "        Short (1 phrase/line) summary of the module's purpose, used as"
  write "        subtitle on modules listing or apps.openerp.com\"\"\","
  write ""
  write "    'description': \"\"\""
  write "        Long description of module's purpose"
  write "    \"\"\","
  write ""
  write "    'author': \"My Company\","
  write "    'website': \"http://www.yourcompany.com\","
  write "    'license': \"LGPL-3\","
  write ""
  write "    # Categories can be used to filter modules in modules listing"
  write "    # Check https://github.com/odoo/odoo/blob/14.0/odoo/addons/base/data/ir_module_category_data.xml"
  write "    # for the full list"
  write "    'category': 'Uncategorized',"
  write "    'version': '0.1',"
  write ""
  write "    # any module necessary for this one to work correctly"
  write "    'depends': ['base'],"
  write ""
  write "    # always loaded"
  write "    'data': ["
  write "    ],"
  write "    'assets': {"
  write "        'web.assets_backend': ["
  write "        ],"
  write "        'web.assets_qweb': ["
  write "        ],"
  write "        'web.assets_frontend': ["
  write "        ],"
  write "    },"
  write "}"

}

create_py()
{

  write "# -*- coding: utf-8 -*-"
  write ""
  if [[ $2 == 'model' ]]
  then
    render_model
  elif [[ $2 == 'wizard' ]]
  then
    render_wizard
  elif [[ $2 == 'manifest' ]]
  then
    render_manifest
  fi
}
### Main script starts here 
if [[ "$1" == "xml" ]]
then

  create_xml $1 $2 $3
elif [[ "$1" == "py" ]]
then

  create_py $1 $2 $3
fi
echo "Done"
